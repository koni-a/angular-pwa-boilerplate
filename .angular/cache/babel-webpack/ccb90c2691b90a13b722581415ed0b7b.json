{"ast":null,"code":"import _toArray from \"C:/PR/PWABoilerplate/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"C:/PR/PWABoilerplate/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:/PR/PWABoilerplate/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/PR/PWABoilerplate/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/PR/PWABoilerplate/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license Angular v13.0.3\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n\nfunction errorObservable(message) {\n  return defer(function () {\n    return throwError(new Error(message));\n  });\n}\n/**\n * @publicApi\n */\n\n\nvar NgswCommChannel = /*#__PURE__*/function () {\n  function NgswCommChannel(serviceWorker) {\n    _classCallCheck(this, NgswCommChannel);\n\n    this.serviceWorker = serviceWorker;\n\n    if (!serviceWorker) {\n      this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n    } else {\n      var controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n      var controllerChanges = controllerChangeEvents.pipe(map(function () {\n        return serviceWorker.controller;\n      }));\n      var currentController = defer(function () {\n        return of(serviceWorker.controller);\n      });\n      var controllerWithChanges = concat(currentController, controllerChanges);\n      this.worker = controllerWithChanges.pipe(filter(function (c) {\n        return !!c;\n      }));\n      this.registration = this.worker.pipe(switchMap(function () {\n        return serviceWorker.getRegistration();\n      }));\n      var rawEvents = fromEvent(serviceWorker, 'message');\n      var rawEventPayload = rawEvents.pipe(map(function (event) {\n        return event.data;\n      }));\n      var eventsUnconnected = rawEventPayload.pipe(filter(function (event) {\n        return event && event.type;\n      }));\n      var events = eventsUnconnected.pipe(publish());\n      events.connect();\n      this.events = events;\n    }\n  }\n\n  _createClass(NgswCommChannel, [{\n    key: \"postMessage\",\n    value: function postMessage(action, payload) {\n      return this.worker.pipe(take(1), tap(function (sw) {\n        sw.postMessage(_objectSpread({\n          action: action\n        }, payload));\n      })).toPromise().then(function () {\n        return undefined;\n      });\n    }\n  }, {\n    key: \"postMessageWithOperation\",\n    value: function postMessageWithOperation(type, payload, operationNonce) {\n      var waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n      var postMessage = this.postMessage(type, payload);\n      return Promise.all([postMessage, waitForOperationCompleted]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            result = _ref2[1];\n\n        return result;\n      });\n    }\n  }, {\n    key: \"generateNonce\",\n    value: function generateNonce() {\n      return Math.round(Math.random() * 10000000);\n    }\n  }, {\n    key: \"eventsOfType\",\n    value: function eventsOfType(type) {\n      var filterFn;\n\n      if (typeof type === 'string') {\n        filterFn = function filterFn(event) {\n          return event.type === type;\n        };\n      } else {\n        filterFn = function filterFn(event) {\n          return type.includes(event.type);\n        };\n      }\n\n      return this.events.pipe(filter(filterFn));\n    }\n  }, {\n    key: \"nextEventOfType\",\n    value: function nextEventOfType(type) {\n      return this.eventsOfType(type).pipe(take(1));\n    }\n  }, {\n    key: \"waitForOperationCompleted\",\n    value: function waitForOperationCompleted(nonce) {\n      return this.eventsOfType('OPERATION_COMPLETED').pipe(filter(function (event) {\n        return event.nonce === nonce;\n      }), take(1), map(function (event) {\n        if (event.result !== undefined) {\n          return event.result;\n        }\n\n        throw new Error(event.error);\n      })).toPromise();\n    }\n  }, {\n    key: \"isEnabled\",\n    get: function get() {\n      return !!this.serviceWorker;\n    }\n  }]);\n\n  return NgswCommChannel;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Subscribe and listen to\n * [Web Push\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\n * Angular Service Worker.\n *\n * @usageNotes\n *\n * You can inject a `SwPush` instance into any component or service\n * as a dependency.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\n * The call returns a `Promise` with a new\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n * instance.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * A request is rejected if the user denies permission, or if the browser\n * blocks or does not support the Push API or ServiceWorkers.\n * Check `SwPush.isEnabled` to confirm status.\n *\n * Invoke Push Notifications by pushing a message with the following payload.\n *\n * ```ts\n * {\n *   \"notification\": {\n *     \"actions\": NotificationAction[],\n *     \"badge\": USVString,\n *     \"body\": DOMString,\n *     \"data\": any,\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\n *     \"icon\": USVString,\n *     \"image\": USVString,\n *     \"lang\": DOMString,\n *     \"renotify\": boolean,\n *     \"requireInteraction\": boolean,\n *     \"silent\": boolean,\n *     \"tag\": DOMString,\n *     \"timestamp\": DOMTimeStamp,\n *     \"title\": DOMString,\n *     \"vibrate\": number[]\n *   }\n * }\n * ```\n *\n * Only `title` is required. See `Notification`\n * [instance\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n *\n * While the subscription is active, Service Worker listens for\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\n * occurrences and creates\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\n * instances in response.\n *\n * Unsubscribe using `SwPush.unsubscribe()`.\n *\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\n * clicks on a notification. For example:\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\n * header=\"app.component.ts\"></code-example>\n *\n * You can read more on handling notification clicks in the [Service worker notifications\n * guide](guide/service-worker-notifications).\n *\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n *\n * @publicApi\n */\n\n\nvar SwPush = /*#__PURE__*/function () {\n  function SwPush(sw) {\n    _classCallCheck(this, SwPush);\n\n    this.sw = sw;\n    this.subscriptionChanges = new Subject();\n\n    if (!sw.isEnabled) {\n      this.messages = NEVER;\n      this.notificationClicks = NEVER;\n      this.subscription = NEVER;\n      return;\n    }\n\n    this.messages = this.sw.eventsOfType('PUSH').pipe(map(function (message) {\n      return message.data;\n    }));\n    this.notificationClicks = this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map(function (message) {\n      return message.data;\n    }));\n    this.pushManager = this.sw.registration.pipe(map(function (registration) {\n      return registration.pushManager;\n    }));\n    var workerDrivenSubscriptions = this.pushManager.pipe(switchMap(function (pm) {\n      return pm.getSubscription();\n    }));\n    this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n  }\n  /**\n   * True if the Service Worker is enabled (supported by the browser and enabled via\n   * `ServiceWorkerModule`).\n   */\n\n\n  _createClass(SwPush, [{\n    key: \"isEnabled\",\n    get: function get() {\n      return this.sw.isEnabled;\n    }\n    /**\n     * Subscribes to Web Push Notifications,\n     * after requesting and receiving user permission.\n     *\n     * @param options An object containing the `serverPublicKey` string.\n     * @returns A Promise that resolves to the new subscription object.\n     */\n\n  }, {\n    key: \"requestSubscription\",\n    value: function requestSubscription(options) {\n      var _this = this;\n\n      if (!this.sw.isEnabled) {\n        return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n      }\n\n      var pushOptions = {\n        userVisibleOnly: true\n      };\n      var key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n      var applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n\n      for (var i = 0; i < key.length; i++) {\n        applicationServerKey[i] = key.charCodeAt(i);\n      }\n\n      pushOptions.applicationServerKey = applicationServerKey;\n      return this.pushManager.pipe(switchMap(function (pm) {\n        return pm.subscribe(pushOptions);\n      }), take(1)).toPromise().then(function (sub) {\n        _this.subscriptionChanges.next(sub);\n\n        return sub;\n      });\n    }\n    /**\n     * Unsubscribes from Service Worker push notifications.\n     *\n     * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\n     *          active subscription or the unsubscribe operation fails.\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _this2 = this;\n\n      if (!this.sw.isEnabled) {\n        return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n      }\n\n      var doUnsubscribe = function doUnsubscribe(sub) {\n        if (sub === null) {\n          throw new Error('Not subscribed to push notifications.');\n        }\n\n        return sub.unsubscribe().then(function (success) {\n          if (!success) {\n            throw new Error('Unsubscribe failed!');\n          }\n\n          _this2.subscriptionChanges.next(null);\n        });\n      };\n\n      return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n    }\n  }, {\n    key: \"decodeBase64\",\n    value: function decodeBase64(input) {\n      return atob(input);\n    }\n  }]);\n\n  return SwPush;\n}();\n\nSwPush.ɵfac = function SwPush_Factory(t) {\n  return new (t || SwPush)(i0.ɵɵinject(NgswCommChannel));\n};\n\nSwPush.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SwPush,\n  factory: SwPush.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwPush, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgswCommChannel\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @see {@link guide/service-worker-communications Service worker communication guide}\n *\n * @publicApi\n */\n\n\nvar SwUpdate = /*#__PURE__*/function () {\n  function SwUpdate(sw) {\n    _classCallCheck(this, SwUpdate);\n\n    this.sw = sw;\n\n    if (!sw.isEnabled) {\n      this.versionUpdates = NEVER;\n      this.available = NEVER;\n      this.activated = NEVER;\n      this.unrecoverable = NEVER;\n      return;\n    }\n\n    this.versionUpdates = this.sw.eventsOfType(['VERSION_DETECTED', 'VERSION_INSTALLATION_FAILED', 'VERSION_READY']);\n    this.available = this.versionUpdates.pipe(filter(function (evt) {\n      return evt.type === 'VERSION_READY';\n    }), map(function (evt) {\n      return {\n        type: 'UPDATE_AVAILABLE',\n        current: evt.currentVersion,\n        available: evt.latestVersion\n      };\n    }));\n    this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n  }\n  /**\n   * True if the Service Worker is enabled (supported by the browser and enabled via\n   * `ServiceWorkerModule`).\n   */\n\n\n  _createClass(SwUpdate, [{\n    key: \"isEnabled\",\n    get: function get() {\n      return this.sw.isEnabled;\n    }\n    /**\n     * Checks for an update and waits until the new version is downloaded from the server and ready\n     * for activation.\n     *\n     * @returns a promise that\n     * - resolves to `true` if a new version was found and is ready to be activated.\n     * - resolves to `false` if no new version was found\n     * - rejects if any error occurs\n     */\n\n  }, {\n    key: \"checkForUpdate\",\n    value: function checkForUpdate() {\n      if (!this.sw.isEnabled) {\n        return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n      }\n\n      var nonce = this.sw.generateNonce();\n      return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', {\n        nonce: nonce\n      }, nonce);\n    }\n    /**\n     * Updates the current client (i.e. browser tab) to the latest version that is ready for\n     * activation.\n     *\n     * @returns a promise that\n     *  - resolves to `true` if an update was activated successfully\n     *  - resolves to `false` if no update was available (for example, the client was already on the\n     *    latest version).\n     *  - rejects if any error occurs\n     */\n\n  }, {\n    key: \"activateUpdate\",\n    value: function activateUpdate() {\n      if (!this.sw.isEnabled) {\n        return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n      }\n\n      var nonce = this.sw.generateNonce();\n      return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', {\n        nonce: nonce\n      }, nonce);\n    }\n  }]);\n\n  return SwUpdate;\n}();\n\nSwUpdate.ɵfac = function SwUpdate_Factory(t) {\n  return new (t || SwUpdate)(i0.ɵɵinject(NgswCommChannel));\n};\n\nSwUpdate.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SwUpdate,\n  factory: SwUpdate.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwUpdate, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgswCommChannel\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\"}\n *\n * @publicApi\n */\n\n\nvar SwRegistrationOptions = function SwRegistrationOptions() {\n  _classCallCheck(this, SwRegistrationOptions);\n};\n\nvar SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\n\nfunction ngswAppInitializer(injector, script, options, platformId) {\n  var initializer = function initializer() {\n    if (!(isPlatformBrowser(platformId) && 'serviceWorker' in navigator && options.enabled !== false)) {\n      return;\n    } // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n    // becomes active. This allows the SW to initialize itself even if there is no application\n    // traffic.\n\n\n    navigator.serviceWorker.addEventListener('controllerchange', function () {\n      if (navigator.serviceWorker.controller !== null) {\n        navigator.serviceWorker.controller.postMessage({\n          action: 'INITIALIZE'\n        });\n      }\n    });\n    var readyToRegister$;\n\n    if (typeof options.registrationStrategy === 'function') {\n      readyToRegister$ = options.registrationStrategy();\n    } else {\n      var _split = (options.registrationStrategy || 'registerWhenStable:30000').split(':'),\n          _split2 = _toArray(_split),\n          strategy = _split2[0],\n          args = _split2.slice(1);\n\n      switch (strategy) {\n        case 'registerImmediately':\n          readyToRegister$ = of(null);\n          break;\n\n        case 'registerWithDelay':\n          readyToRegister$ = delayWithTimeout(+args[0] || 0);\n          break;\n\n        case 'registerWhenStable':\n          readyToRegister$ = !args[0] ? whenStable(injector) : merge(whenStable(injector), delayWithTimeout(+args[0]));\n          break;\n\n        default:\n          // Unknown strategy.\n          throw new Error(\"Unknown ServiceWorker registration strategy: \".concat(options.registrationStrategy));\n      }\n    } // Don't return anything to avoid blocking the application until the SW is registered.\n    // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\n    // given that some registration strategies wait for the app to stabilize).\n    // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n\n\n    var ngZone = injector.get(NgZone);\n    ngZone.runOutsideAngular(function () {\n      return readyToRegister$.pipe(take(1)).subscribe(function () {\n        return navigator.serviceWorker.register(script, {\n          scope: options.scope\n        }).catch(function (err) {\n          return console.error('Service worker registration failed with:', err);\n        });\n      });\n    });\n  };\n\n  return initializer;\n}\n\nfunction delayWithTimeout(timeout) {\n  return of(null).pipe(delay(timeout));\n}\n\nfunction whenStable(injector) {\n  var appRef = injector.get(ApplicationRef);\n  return appRef.isStable.pipe(filter(function (stable) {\n    return stable;\n  }));\n}\n\nfunction ngswCommChannelFactory(opts, platformId) {\n  return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker : undefined);\n}\n/**\n * @publicApi\n */\n\n\nvar ServiceWorkerModule = /*#__PURE__*/function () {\n  function ServiceWorkerModule() {\n    _classCallCheck(this, ServiceWorkerModule);\n  }\n\n  _createClass(ServiceWorkerModule, null, [{\n    key: \"register\",\n    value:\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     */\n    function register(script) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return {\n        ngModule: ServiceWorkerModule,\n        providers: [{\n          provide: SCRIPT,\n          useValue: script\n        }, {\n          provide: SwRegistrationOptions,\n          useValue: opts\n        }, {\n          provide: NgswCommChannel,\n          useFactory: ngswCommChannelFactory,\n          deps: [SwRegistrationOptions, PLATFORM_ID]\n        }, {\n          provide: APP_INITIALIZER,\n          useFactory: ngswAppInitializer,\n          deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n          multi: true\n        }]\n      };\n    }\n  }]);\n\n  return ServiceWorkerModule;\n}();\n\nServiceWorkerModule.ɵfac = function ServiceWorkerModule_Factory(t) {\n  return new (t || ServiceWorkerModule)();\n};\n\nServiceWorkerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ServiceWorkerModule\n});\nServiceWorkerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SwPush, SwUpdate]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServiceWorkerModule, [{\n    type: NgModule,\n    args: [{\n      providers: [SwPush, SwUpdate]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate };","map":{"version":3,"sources":["C:/PR/PWABoilerplate/node_modules/@angular/service-worker/fesm2020/service-worker.mjs"],"names":["isPlatformBrowser","i0","Injectable","InjectionToken","NgZone","ApplicationRef","PLATFORM_ID","APP_INITIALIZER","Injector","NgModule","defer","throwError","fromEvent","of","concat","Subject","NEVER","merge","map","filter","switchMap","publish","take","tap","delay","ERR_SW_NOT_SUPPORTED","errorObservable","message","Error","NgswCommChannel","serviceWorker","worker","events","registration","controllerChangeEvents","controllerChanges","pipe","controller","currentController","controllerWithChanges","c","getRegistration","rawEvents","rawEventPayload","event","data","eventsUnconnected","type","connect","action","payload","sw","postMessage","toPromise","then","undefined","operationNonce","waitForOperationCompleted","Promise","all","result","Math","round","random","filterFn","includes","eventsOfType","nonce","error","SwPush","subscriptionChanges","isEnabled","messages","notificationClicks","subscription","pushManager","workerDrivenSubscriptions","pm","getSubscription","options","reject","pushOptions","userVisibleOnly","key","decodeBase64","serverPublicKey","replace","applicationServerKey","Uint8Array","ArrayBuffer","length","i","charCodeAt","subscribe","sub","next","doUnsubscribe","unsubscribe","success","input","atob","ɵfac","ɵprov","SwUpdate","versionUpdates","available","activated","unrecoverable","evt","current","currentVersion","latestVersion","generateNonce","postMessageWithOperation","SwRegistrationOptions","SCRIPT","ngswAppInitializer","injector","script","platformId","initializer","navigator","enabled","addEventListener","readyToRegister$","registrationStrategy","split","strategy","args","delayWithTimeout","whenStable","ngZone","get","runOutsideAngular","register","scope","catch","err","console","timeout","appRef","isStable","stable","ngswCommChannelFactory","opts","ServiceWorkerModule","ngModule","providers","provide","useValue","useFactory","deps","multi","ɵmod","ɵinj"],"mappings":"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","sourcesContent":["/**\n * @license Angular v13.0.3\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\nfunction errorObservable(message) {\n    return defer(() => throwError(new Error(message)));\n}\n/**\n * @publicApi\n */\nclass NgswCommChannel {\n    constructor(serviceWorker) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker) {\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n            const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n            const currentController = defer(() => of(serviceWorker.controller));\n            const controllerWithChanges = concat(currentController, controllerChanges);\n            this.worker = controllerWithChanges.pipe(filter((c) => !!c));\n            this.registration = (this.worker.pipe(switchMap(() => serviceWorker.getRegistration())));\n            const rawEvents = fromEvent(serviceWorker, 'message');\n            const rawEventPayload = rawEvents.pipe(map(event => event.data));\n            const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n            const events = eventsUnconnected.pipe(publish());\n            events.connect();\n            this.events = events;\n        }\n    }\n    postMessage(action, payload) {\n        return this.worker\n            .pipe(take(1), tap((sw) => {\n            sw.postMessage({\n                action,\n                ...payload,\n            });\n        }))\n            .toPromise()\n            .then(() => undefined);\n    }\n    postMessageWithOperation(type, payload, operationNonce) {\n        const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n        const postMessage = this.postMessage(type, payload);\n        return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\n    }\n    generateNonce() {\n        return Math.round(Math.random() * 10000000);\n    }\n    eventsOfType(type) {\n        let filterFn;\n        if (typeof type === 'string') {\n            filterFn = (event) => event.type === type;\n        }\n        else {\n            filterFn = (event) => type.includes(event.type);\n        }\n        return this.events.pipe(filter(filterFn));\n    }\n    nextEventOfType(type) {\n        return this.eventsOfType(type).pipe(take(1));\n    }\n    waitForOperationCompleted(nonce) {\n        return this.eventsOfType('OPERATION_COMPLETED')\n            .pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n            if (event.result !== undefined) {\n                return event.result;\n            }\n            throw new Error(event.error);\n        }))\n            .toPromise();\n    }\n    get isEnabled() {\n        return !!this.serviceWorker;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe and listen to\n * [Web Push\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\n * Angular Service Worker.\n *\n * @usageNotes\n *\n * You can inject a `SwPush` instance into any component or service\n * as a dependency.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\n * The call returns a `Promise` with a new\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n * instance.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * A request is rejected if the user denies permission, or if the browser\n * blocks or does not support the Push API or ServiceWorkers.\n * Check `SwPush.isEnabled` to confirm status.\n *\n * Invoke Push Notifications by pushing a message with the following payload.\n *\n * ```ts\n * {\n *   \"notification\": {\n *     \"actions\": NotificationAction[],\n *     \"badge\": USVString,\n *     \"body\": DOMString,\n *     \"data\": any,\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\n *     \"icon\": USVString,\n *     \"image\": USVString,\n *     \"lang\": DOMString,\n *     \"renotify\": boolean,\n *     \"requireInteraction\": boolean,\n *     \"silent\": boolean,\n *     \"tag\": DOMString,\n *     \"timestamp\": DOMTimeStamp,\n *     \"title\": DOMString,\n *     \"vibrate\": number[]\n *   }\n * }\n * ```\n *\n * Only `title` is required. See `Notification`\n * [instance\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n *\n * While the subscription is active, Service Worker listens for\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\n * occurrences and creates\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\n * instances in response.\n *\n * Unsubscribe using `SwPush.unsubscribe()`.\n *\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\n * clicks on a notification. For example:\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\n * header=\"app.component.ts\"></code-example>\n *\n * You can read more on handling notification clicks in the [Service worker notifications\n * guide](guide/service-worker-notifications).\n *\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n *\n * @publicApi\n */\nclass SwPush {\n    constructor(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new Subject();\n        if (!sw.isEnabled) {\n            this.messages = NEVER;\n            this.notificationClicks = NEVER;\n            this.subscription = NEVER;\n            return;\n        }\n        this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n        this.notificationClicks =\n            this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map((message) => message.data));\n        this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n        const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n        this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n        return this.sw.isEnabled;\n    }\n    /**\n     * Subscribes to Web Push Notifications,\n     * after requesting and receiving user permission.\n     *\n     * @param options An object containing the `serverPublicKey` string.\n     * @returns A Promise that resolves to the new subscription object.\n     */\n    requestSubscription(options) {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const pushOptions = { userVisibleOnly: true };\n        let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (let i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1))\n            .toPromise()\n            .then(sub => {\n            this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    }\n    /**\n     * Unsubscribes from Service Worker push notifications.\n     *\n     * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\n     *          active subscription or the unsubscribe operation fails.\n     */\n    unsubscribe() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const doUnsubscribe = (sub) => {\n            if (sub === null) {\n                throw new Error('Not subscribed to push notifications.');\n            }\n            return sub.unsubscribe().then(success => {\n                if (!success) {\n                    throw new Error('Unsubscribe failed!');\n                }\n                this.subscriptionChanges.next(null);\n            });\n        };\n        return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n    }\n    decodeBase64(input) {\n        return atob(input);\n    }\n}\nSwPush.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SwPush, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable });\nSwPush.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SwPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SwPush, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @see {@link guide/service-worker-communications Service worker communication guide}\n *\n * @publicApi\n */\nclass SwUpdate {\n    constructor(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.versionUpdates = NEVER;\n            this.available = NEVER;\n            this.activated = NEVER;\n            this.unrecoverable = NEVER;\n            return;\n        }\n        this.versionUpdates = this.sw.eventsOfType(['VERSION_DETECTED', 'VERSION_INSTALLATION_FAILED', 'VERSION_READY']);\n        this.available = this.versionUpdates.pipe(filter((evt) => evt.type === 'VERSION_READY'), map(evt => ({\n            type: 'UPDATE_AVAILABLE',\n            current: evt.currentVersion,\n            available: evt.latestVersion,\n        })));\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n        this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n        return this.sw.isEnabled;\n    }\n    /**\n     * Checks for an update and waits until the new version is downloaded from the server and ready\n     * for activation.\n     *\n     * @returns a promise that\n     * - resolves to `true` if a new version was found and is ready to be activated.\n     * - resolves to `false` if no new version was found\n     * - rejects if any error occurs\n     */\n    checkForUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const nonce = this.sw.generateNonce();\n        return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', { nonce }, nonce);\n    }\n    /**\n     * Updates the current client (i.e. browser tab) to the latest version that is ready for\n     * activation.\n     *\n     * @returns a promise that\n     *  - resolves to `true` if an update was activated successfully\n     *  - resolves to `false` if no update was available (for example, the client was already on the\n     *    latest version).\n     *  - rejects if any error occurs\n     */\n    activateUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const nonce = this.sw.generateNonce();\n        return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', { nonce }, nonce);\n    }\n}\nSwUpdate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SwUpdate, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable });\nSwUpdate.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SwUpdate });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SwUpdate, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\"}\n *\n * @publicApi\n */\nclass SwRegistrationOptions {\n}\nconst SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\nfunction ngswAppInitializer(injector, script, options, platformId) {\n    const initializer = () => {\n        if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', () => {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        });\n        let readyToRegister$;\n        if (typeof options.registrationStrategy === 'function') {\n            readyToRegister$ = options.registrationStrategy();\n        }\n        else {\n            const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable:30000').split(':');\n            switch (strategy) {\n                case 'registerImmediately':\n                    readyToRegister$ = of(null);\n                    break;\n                case 'registerWithDelay':\n                    readyToRegister$ = delayWithTimeout(+args[0] || 0);\n                    break;\n                case 'registerWhenStable':\n                    readyToRegister$ = !args[0] ? whenStable(injector) :\n                        merge(whenStable(injector), delayWithTimeout(+args[0]));\n                    break;\n                default:\n                    // Unknown strategy.\n                    throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n            }\n        }\n        // Don't return anything to avoid blocking the application until the SW is registered.\n        // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\n        // given that some registration strategies wait for the app to stabilize).\n        // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n        const ngZone = injector.get(NgZone);\n        ngZone.runOutsideAngular(() => readyToRegister$.pipe(take(1)).subscribe(() => navigator.serviceWorker.register(script, { scope: options.scope })\n            .catch(err => console.error('Service worker registration failed with:', err))));\n    };\n    return initializer;\n}\nfunction delayWithTimeout(timeout) {\n    return of(null).pipe(delay(timeout));\n}\nfunction whenStable(injector) {\n    const appRef = injector.get(ApplicationRef);\n    return appRef.isStable.pipe(filter(stable => stable));\n}\nfunction ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n        undefined);\n}\n/**\n * @publicApi\n */\nclass ServiceWorkerModule {\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     */\n    static register(script, opts = {}) {\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: SwRegistrationOptions, useValue: opts },\n                {\n                    provide: NgswCommChannel,\n                    useFactory: ngswCommChannelFactory,\n                    deps: [SwRegistrationOptions, PLATFORM_ID]\n                },\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n                    multi: true,\n                },\n            ],\n        };\n    }\n}\nServiceWorkerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ServiceWorkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nServiceWorkerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ServiceWorkerModule });\nServiceWorkerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ServiceWorkerModule, providers: [SwPush, SwUpdate] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ServiceWorkerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [SwPush, SwUpdate],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate };\n"]},"metadata":{},"sourceType":"module"}